generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Store {'
  id              String      @id @default(uuid())
  name            String
  userId          String
  billboards      Billboard[] @relation("StoreToBillboard")
  categories      Category[]  @relation("StoreToCategory")
  products        Product[]   @relation("StoreToProduct")
  orders          Order[]     @relation("StoreToOrder")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Billboard {
  id          String          @id @default(uuid())
  storeId     String
  store       Store           @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([storeId])
}

model Category {
  id          String          @id @default(uuid())
  storeId     String
  store       Store           @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard       @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[]       @relation("CategoryToProduct")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id          String          @id @default(uuid())
  storeId     String
  store       Store           @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category        @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  description String
  price       Decimal
  isFeatured  Boolean         @default(false)
  isArchived  Boolean         @default(false)
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model Order {
  id          String          @id @default(uuid())
  storeId     String          // Foreign Key to Store
  store       Store           @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems  OrderItem[]     // Relation to OrderItem model
  isPaid      Boolean         @default(false)
  phone       String          @default("")
  address     String          @default("")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String            @id @default(uuid())
  orderId   String            // Foreign Key to Order
  order     Order             @relation(fields: [orderId], references: [id])
  productId String            // Foreign Key to Product
  product   Product           @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Image {
  id          String          @id @default(uuid())
  productId   String
  product     Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([productId])
}